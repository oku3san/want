/*
Copyright © 2023 NAME HERE <EMAIL ADDRESS>

*/
package cmd

import (
    "bufio"
    "bytes"
    "encoding/json"
    "fmt"
    "github.com/spf13/cobra"
    "io/ioutil"
    "net/http"
    "os"
)

// Message ChatGPT に投げるメッセージの構造体
type Message struct {
    Role    string `json:"role"`
    Content string `json:"content"`
}

// OpenaiRequest ChatGPI に投げる POST リクエストの構造体
type OpenaiRequest struct {
    Model    string    `json:"model"`
    Messages []Message `json:"messages"`
}

// OpenaiResponse ChagGPT からのレスポンスの構造体
type OpenaiResponse struct {
    ID      string   `json:"id"`
    Object  string   `json:"object"`
    Created int      `json:"created"`
    Choices []Choice `json:"choices"`
    Usages  Usage    `json:"usage"`
}

type Choice struct {
    Index        int     `json:"index"`
    Messages     Message `json:"message"`
    FinishReason string  `json:"finish_reason"`
}

type Usage struct {
    PromptTokens     int `json:"prompt_tokens"`
    CompletionTokens int `json:"completion_tokens"`
    TotalTokens      int `json:"total_tokens"`
}

var messages []Message

// rootCmd represents the base command when called without any subcommands
var rootCmd = &cobra.Command{
    Use:   "want",
    Short: "A brief description of your application",
    Long: `A longer description that spans multiple lines and likely contains
examples and usage of using your application. For example:

Cobra is a CLI library for Go that empowers applications.
This application is a tool to generate the needed files
to quickly create a Cobra application.`,
    Run: func(cmd *cobra.Command, args []string) {
        // URL を変数でもつ
        endpoint := "https://api.openai.com/v1/chat/completions"

        // API キー取得
        apiKey := os.Getenv("OPENAI_API_KEY")
        if apiKey == "" {
            fmt.Println("OPENAI_API_KEY という名前で環境変数を設定してください")
            return
        }

        reader := bufio.NewReader(os.Stdin)
        question, _ := reader.ReadString('\n')

        // chatgpt に投げるメッセージを作成
        // The system message helps set the behavior of the assistant. In the example above, the assistant was instructed with “You are a helpful assistant.”
        // The user messages help instruct the assistant. They can be generated by the end users of an application, or set by a developer as an instruction.
        // The assistant messages help store prior responses. They can also be written by a developer to help give examples of desired behavior.

        messages = append(messages, Message{
            Role:    "system",
            Content: "語尾は必ず「ござる」としてください",
        })

        messages = append(messages, Message{
            Role:    "user",
            Content: question,
        })

        requestBody := OpenaiRequest{
            Model:    "gpt-3.5-turbo",
            Messages: messages,
        }

        // OpenaiRequest 構造体を JSON にして POST リクエストを実施
        requestJSON, _ := json.Marshal(requestBody)
        request, err := http.NewRequest("POST", endpoint, bytes.NewBuffer(requestJSON))
        if err != nil {
            fmt.Println(err)
            return
        }
        request.Header.Set("Content-Type", "application/json")
        request.Header.Set("Authorization", "Bearer "+apiKey)
        client := &http.Client{}
        resp, err := client.Do(request)
        if err != nil {
            fmt.Println(err)
            return
        }
        defer resp.Body.Close()

        // response の整形
        body, err := ioutil.ReadAll(resp.Body)
        if err != nil {
            fmt.Println(err)
            return
        }

        var response OpenaiResponse
        err = json.Unmarshal(body, &response)
        if err != nil {
            fmt.Println(err)
            return
        }
        //
        //messages = append(messages, Message{
        //    Role:    "assistant",
        //    Content: response.Choices[0].Messages.Content,
        //})

        fmt.Println(response.Choices[0].Messages.Content)
    },
}

func Execute() {
    err := rootCmd.Execute()
    if err != nil {
        os.Exit(1)
    }
}

func init() {
    rootCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
}
